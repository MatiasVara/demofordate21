/*
 * generated by Xtext 2.21.0
 */
package org.virtio.virtiodriver.ftracelanguage.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class FrtraceLanguageGrammarAccess extends AbstractGrammarElementFinder {
	
	public class TraceModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.virtio.virtiodriver.ftracelanguage.FrtraceLanguage.TraceModel");
		private final Assignment cTracesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTracesTraceParserRuleCall_0 = (RuleCall)cTracesAssignment.eContents().get(0);
		
		//// Accepted traces follow these structures:
		//// insmod-218   [000] ....    85.178379: virtio_dev_probe: Driver
		//// insmod-218   [000] ....    85.180762: virtio_dev_probe: FeaturesOK
		//// insmod-218   [000] ....    85.185428: virtio_dev_probe: DriverOK
		//TraceModel:
		//	Traces+=Trace*;
		@Override public ParserRule getRule() { return rule; }
		
		//Traces+=Trace*
		public Assignment getTracesAssignment() { return cTracesAssignment; }
		
		//Trace
		public RuleCall getTracesTraceParserRuleCall_0() { return cTracesTraceParserRuleCall_0; }
	}
	public class TraceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.virtio.virtiodriver.ftracelanguage.FrtraceLanguage.Trace");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFirstAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFirstIDTerminalRuleCall_0_0 = (RuleCall)cFirstAssignment_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSecondAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSecondINTTerminalRuleCall_2_0 = (RuleCall)cSecondAssignment_2.eContents().get(0);
		private final Keyword cLeftSquareBracketDigitZeroDigitZeroDigitZeroRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cFullStopFullStopFullStopFullStopKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTimestampAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTimestampINTTerminalRuleCall_5_0 = (RuleCall)cTimestampAssignment_5.eContents().get(0);
		private final Keyword cFullStopKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cDecAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cDecINTTerminalRuleCall_7_0 = (RuleCall)cDecAssignment_7.eContents().get(0);
		private final Keyword cColonKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cFunctionAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cFunctionIDTerminalRuleCall_9_0 = (RuleCall)cFunctionAssignment_9.eContents().get(0);
		private final Keyword cColonKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cNameAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cNameIDTerminalRuleCall_11_0 = (RuleCall)cNameAssignment_11.eContents().get(0);
		
		//Trace:
		//	first=ID '-' second=INT '[000]' '....' timestamp=INT '.' dec=INT ':' function=ID ':' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//first=ID '-' second=INT '[000]' '....' timestamp=INT '.' dec=INT ':' function=ID ':' name=ID
		public Group getGroup() { return cGroup; }
		
		//first=ID
		public Assignment getFirstAssignment_0() { return cFirstAssignment_0; }
		
		//ID
		public RuleCall getFirstIDTerminalRuleCall_0_0() { return cFirstIDTerminalRuleCall_0_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
		
		//second=INT
		public Assignment getSecondAssignment_2() { return cSecondAssignment_2; }
		
		//INT
		public RuleCall getSecondINTTerminalRuleCall_2_0() { return cSecondINTTerminalRuleCall_2_0; }
		
		//'[000]'
		public Keyword getLeftSquareBracketDigitZeroDigitZeroDigitZeroRightSquareBracketKeyword_3() { return cLeftSquareBracketDigitZeroDigitZeroDigitZeroRightSquareBracketKeyword_3; }
		
		//'....'
		public Keyword getFullStopFullStopFullStopFullStopKeyword_4() { return cFullStopFullStopFullStopFullStopKeyword_4; }
		
		//timestamp=INT
		public Assignment getTimestampAssignment_5() { return cTimestampAssignment_5; }
		
		//INT
		public RuleCall getTimestampINTTerminalRuleCall_5_0() { return cTimestampINTTerminalRuleCall_5_0; }
		
		//'.'
		public Keyword getFullStopKeyword_6() { return cFullStopKeyword_6; }
		
		//dec=INT
		public Assignment getDecAssignment_7() { return cDecAssignment_7; }
		
		//INT
		public RuleCall getDecINTTerminalRuleCall_7_0() { return cDecINTTerminalRuleCall_7_0; }
		
		//':'
		public Keyword getColonKeyword_8() { return cColonKeyword_8; }
		
		//function=ID
		public Assignment getFunctionAssignment_9() { return cFunctionAssignment_9; }
		
		//ID
		public RuleCall getFunctionIDTerminalRuleCall_9_0() { return cFunctionIDTerminalRuleCall_9_0; }
		
		//':'
		public Keyword getColonKeyword_10() { return cColonKeyword_10; }
		
		//name=ID
		public Assignment getNameAssignment_11() { return cNameAssignment_11; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_11_0() { return cNameIDTerminalRuleCall_11_0; }
	}
	
	
	private final TraceModelElements pTraceModel;
	private final TraceElements pTrace;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public FrtraceLanguageGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pTraceModel = new TraceModelElements();
		this.pTrace = new TraceElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.virtio.virtiodriver.ftracelanguage.FrtraceLanguage".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//// Accepted traces follow these structures:
	//// insmod-218   [000] ....    85.178379: virtio_dev_probe: Driver
	//// insmod-218   [000] ....    85.180762: virtio_dev_probe: FeaturesOK
	//// insmod-218   [000] ....    85.185428: virtio_dev_probe: DriverOK
	//TraceModel:
	//	Traces+=Trace*;
	public TraceModelElements getTraceModelAccess() {
		return pTraceModel;
	}
	
	public ParserRule getTraceModelRule() {
		return getTraceModelAccess().getRule();
	}
	
	//Trace:
	//	first=ID '-' second=INT '[000]' '....' timestamp=INT '.' dec=INT ':' function=ID ':' name=ID;
	public TraceElements getTraceAccess() {
		return pTrace;
	}
	
	public ParserRule getTraceRule() {
		return getTraceAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
