/*
 * generated by Xtext 2.21.0
 */
grammar InternalFrtraceLanguage;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.virtio.virtiodriver.ftracelanguage.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.virtio.virtiodriver.ftracelanguage.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.virtio.virtiodriver.ftracelanguage.services.FrtraceLanguageGrammarAccess;

}

@parser::members {

 	private FrtraceLanguageGrammarAccess grammarAccess;

    public InternalFrtraceLanguageParser(TokenStream input, FrtraceLanguageGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "TraceModel";
   	}

   	@Override
   	protected FrtraceLanguageGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleTraceModel
entryRuleTraceModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTraceModelRule()); }
	iv_ruleTraceModel=ruleTraceModel
	{ $current=$iv_ruleTraceModel.current; }
	EOF;

// Rule TraceModel
ruleTraceModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getTraceModelAccess().getTracesTraceParserRuleCall_0());
			}
			lv_Traces_0_0=ruleTrace
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getTraceModelRule());
				}
				add(
					$current,
					"Traces",
					lv_Traces_0_0,
					"org.virtio.virtiodriver.ftracelanguage.FrtraceLanguage.Trace");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleTrace
entryRuleTrace returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTraceRule()); }
	iv_ruleTrace=ruleTrace
	{ $current=$iv_ruleTrace.current; }
	EOF;

// Rule Trace
ruleTrace returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_first_0_0=RULE_ID
				{
					newLeafNode(lv_first_0_0, grammarAccess.getTraceAccess().getFirstIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTraceRule());
					}
					setWithLastConsumed(
						$current,
						"first",
						lv_first_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1='-'
		{
			newLeafNode(otherlv_1, grammarAccess.getTraceAccess().getHyphenMinusKeyword_1());
		}
		(
			(
				lv_second_2_0=RULE_INT
				{
					newLeafNode(lv_second_2_0, grammarAccess.getTraceAccess().getSecondINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTraceRule());
					}
					setWithLastConsumed(
						$current,
						"second",
						lv_second_2_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_3='[000]'
		{
			newLeafNode(otherlv_3, grammarAccess.getTraceAccess().getLeftSquareBracketDigitZeroDigitZeroDigitZeroRightSquareBracketKeyword_3());
		}
		otherlv_4='....'
		{
			newLeafNode(otherlv_4, grammarAccess.getTraceAccess().getFullStopFullStopFullStopFullStopKeyword_4());
		}
		(
			(
				lv_timestamp_5_0=RULE_INT
				{
					newLeafNode(lv_timestamp_5_0, grammarAccess.getTraceAccess().getTimestampINTTerminalRuleCall_5_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTraceRule());
					}
					setWithLastConsumed(
						$current,
						"timestamp",
						lv_timestamp_5_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_6='.'
		{
			newLeafNode(otherlv_6, grammarAccess.getTraceAccess().getFullStopKeyword_6());
		}
		(
			(
				lv_dec_7_0=RULE_INT
				{
					newLeafNode(lv_dec_7_0, grammarAccess.getTraceAccess().getDecINTTerminalRuleCall_7_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTraceRule());
					}
					setWithLastConsumed(
						$current,
						"dec",
						lv_dec_7_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_8=':'
		{
			newLeafNode(otherlv_8, grammarAccess.getTraceAccess().getColonKeyword_8());
		}
		(
			(
				lv_function_9_0=RULE_ID
				{
					newLeafNode(lv_function_9_0, grammarAccess.getTraceAccess().getFunctionIDTerminalRuleCall_9_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTraceRule());
					}
					setWithLastConsumed(
						$current,
						"function",
						lv_function_9_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_10=':'
		{
			newLeafNode(otherlv_10, grammarAccess.getTraceAccess().getColonKeyword_10());
		}
		(
			(
				lv_name_11_0=RULE_ID
				{
					newLeafNode(lv_name_11_0, grammarAccess.getTraceAccess().getNameIDTerminalRuleCall_11_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTraceRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_11_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
