/*
 * generated by Xtext 2.21.0
 */
grammar InternalFrtraceLanguage;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.virtio.virtiodriver.ftracelanguage.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.virtio.virtiodriver.ftracelanguage.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.virtio.virtiodriver.ftracelanguage.services.FrtraceLanguageGrammarAccess;

}
@parser::members {
	private FrtraceLanguageGrammarAccess grammarAccess;

	public void setGrammarAccess(FrtraceLanguageGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleTraceModel
entryRuleTraceModel
:
{ before(grammarAccess.getTraceModelRule()); }
	 ruleTraceModel
{ after(grammarAccess.getTraceModelRule()); } 
	 EOF 
;

// Rule TraceModel
ruleTraceModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTraceModelAccess().getTracesAssignment()); }
		(rule__TraceModel__TracesAssignment)*
		{ after(grammarAccess.getTraceModelAccess().getTracesAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTrace
entryRuleTrace
:
{ before(grammarAccess.getTraceRule()); }
	 ruleTrace
{ after(grammarAccess.getTraceRule()); } 
	 EOF 
;

// Rule Trace
ruleTrace 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTraceAccess().getGroup()); }
		(rule__Trace__Group__0)
		{ after(grammarAccess.getTraceAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Trace__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Trace__Group__0__Impl
	rule__Trace__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Trace__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTraceAccess().getFirstAssignment_0()); }
	(rule__Trace__FirstAssignment_0)
	{ after(grammarAccess.getTraceAccess().getFirstAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Trace__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Trace__Group__1__Impl
	rule__Trace__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Trace__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTraceAccess().getHyphenMinusKeyword_1()); }
	'-'
	{ after(grammarAccess.getTraceAccess().getHyphenMinusKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Trace__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Trace__Group__2__Impl
	rule__Trace__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Trace__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTraceAccess().getSecondAssignment_2()); }
	(rule__Trace__SecondAssignment_2)
	{ after(grammarAccess.getTraceAccess().getSecondAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Trace__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Trace__Group__3__Impl
	rule__Trace__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Trace__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTraceAccess().getLeftSquareBracketDigitZeroDigitZeroDigitZeroRightSquareBracketKeyword_3()); }
	'[000]'
	{ after(grammarAccess.getTraceAccess().getLeftSquareBracketDigitZeroDigitZeroDigitZeroRightSquareBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Trace__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Trace__Group__4__Impl
	rule__Trace__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Trace__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTraceAccess().getFullStopFullStopFullStopFullStopKeyword_4()); }
	'....'
	{ after(grammarAccess.getTraceAccess().getFullStopFullStopFullStopFullStopKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Trace__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Trace__Group__5__Impl
	rule__Trace__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Trace__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTraceAccess().getTimestampAssignment_5()); }
	(rule__Trace__TimestampAssignment_5)
	{ after(grammarAccess.getTraceAccess().getTimestampAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Trace__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Trace__Group__6__Impl
	rule__Trace__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Trace__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTraceAccess().getFullStopKeyword_6()); }
	'.'
	{ after(grammarAccess.getTraceAccess().getFullStopKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Trace__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Trace__Group__7__Impl
	rule__Trace__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Trace__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTraceAccess().getDecAssignment_7()); }
	(rule__Trace__DecAssignment_7)
	{ after(grammarAccess.getTraceAccess().getDecAssignment_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Trace__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Trace__Group__8__Impl
	rule__Trace__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__Trace__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTraceAccess().getColonKeyword_8()); }
	':'
	{ after(grammarAccess.getTraceAccess().getColonKeyword_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Trace__Group__9
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Trace__Group__9__Impl
	rule__Trace__Group__10
;
finally {
	restoreStackSize(stackSize);
}

rule__Trace__Group__9__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTraceAccess().getFunctionAssignment_9()); }
	(rule__Trace__FunctionAssignment_9)
	{ after(grammarAccess.getTraceAccess().getFunctionAssignment_9()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Trace__Group__10
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Trace__Group__10__Impl
	rule__Trace__Group__11
;
finally {
	restoreStackSize(stackSize);
}

rule__Trace__Group__10__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTraceAccess().getColonKeyword_10()); }
	':'
	{ after(grammarAccess.getTraceAccess().getColonKeyword_10()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Trace__Group__11
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Trace__Group__11__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Trace__Group__11__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTraceAccess().getNameAssignment_11()); }
	(rule__Trace__NameAssignment_11)
	{ after(grammarAccess.getTraceAccess().getNameAssignment_11()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TraceModel__TracesAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTraceModelAccess().getTracesTraceParserRuleCall_0()); }
		ruleTrace
		{ after(grammarAccess.getTraceModelAccess().getTracesTraceParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Trace__FirstAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTraceAccess().getFirstIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getTraceAccess().getFirstIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Trace__SecondAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTraceAccess().getSecondINTTerminalRuleCall_2_0()); }
		RULE_INT
		{ after(grammarAccess.getTraceAccess().getSecondINTTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Trace__TimestampAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTraceAccess().getTimestampINTTerminalRuleCall_5_0()); }
		RULE_INT
		{ after(grammarAccess.getTraceAccess().getTimestampINTTerminalRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Trace__DecAssignment_7
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTraceAccess().getDecINTTerminalRuleCall_7_0()); }
		RULE_INT
		{ after(grammarAccess.getTraceAccess().getDecINTTerminalRuleCall_7_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Trace__FunctionAssignment_9
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTraceAccess().getFunctionIDTerminalRuleCall_9_0()); }
		RULE_ID
		{ after(grammarAccess.getTraceAccess().getFunctionIDTerminalRuleCall_9_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Trace__NameAssignment_11
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTraceAccess().getNameIDTerminalRuleCall_11_0()); }
		RULE_ID
		{ after(grammarAccess.getTraceAccess().getNameIDTerminalRuleCall_11_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
