ClockConstraintSystem VirtIOStatusRegisterForValidation{
	imports {
		import "platform:/plugin/fr.inria.aoste.timesquare.ccslkernel.model/ccsllibrary/kernel.ccslLib" as lib0; 
		import "platform:/plugin/fr.inria.aoste.timesquare.ccslkernel.model/ccsllibrary/CCSL.ccslLib" as lib1; 
	}
	
	entryBlock main
	
	Block main{
		Clock BaseTicks;
		
        // This must be generated from the trace
        // Seq 1: correct trace
        //
        Sequence seqForDriver:IntegerSequence = (1);
        Sequence seqForFeaturesOK:IntegerSequence = (2);
        Sequence seqForDriverOK:IntegerSequence = (4);
        
        // Sequence 2: Incorrect trace
        // Sequence seqForDriver:IntegerSequence = (1);
        // Sequence seqForFeaturesOK:IntegerSequence = (4);
        // Sequence seqForDriverOK:IntegerSequence = (2);
         
        // Sequence 3: Incorrect trace
        // Sequence seqForDriver:IntegerSequence = (4);
        // Sequence seqForFeaturesOK:IntegerSequence = (2);
        // Sequence seqForDriverOK:IntegerSequence = (1);
         
        // Sequence 4: Incorrect trace
        // Sequence seqForDriver:IntegerSequence = (4);
        // Sequence seqForFeaturesOK:IntegerSequence = (1);
        // Sequence seqForDriverOK:IntegerSequence = (2);
         
        // Sequence 5: Incorrect trace
        // Sequence seqForDriver:IntegerSequence = (2);
        // Sequence seqForFeaturesOK:IntegerSequence = (1);
        // Sequence seqForDriverOK:IntegerSequence = (4);
         
        // Sequence 6: Incorrect trace
        // Sequence seqForDriver:IntegerSequence = (2);
        // Sequence seqForFeaturesOK:IntegerSequence = (4);
        // Sequence seqForDriverOK:IntegerSequence = (1);

        Expression Driver=FilterBy( FilterByClock -> BaseTicks ,FilterBySeq -> seqForDriver)
        Expression FeaturesOK=FilterBy( FilterByClock -> BaseTicks ,FilterBySeq -> seqForFeaturesOK)    
        Expression DriverOK=FilterBy( FilterByClock -> BaseTicks ,FilterBySeq -> seqForDriverOK)
        
        assert Relation AckPrecedesFeatureOK[Precedes](   LeftClock -> Driver ,	RightClock -> FeaturesOK )
        assert Relation FeatureOKPrecedes[Precedes](   LeftClock -> FeaturesOK ,	RightClock -> DriverOK )        
	}
}

